package pt.ipg.mcm.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import pt.ipg.mcm.entities.Produto;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PRODUTO.
*/
public class ProdutoDao extends AbstractDao<Produto, Long> {

    public static final String TABLENAME = "PRODUTO";

    /**
     * Properties of entity Produto.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nome = new Property(1, String.class, "nome", false, "NOME");
        public final static Property PrecoActual = new Property(2, Integer.class, "precoActual", false, "PRECO_ACTUAL");
        public final static Property Foto = new Property(3, byte[].class, "foto", false, "FOTO");
        public final static Property Sync = new Property(4, Integer.class, "sync", false, "SYNC");
    };

    private DaoSession daoSession;


    public ProdutoDao(DaoConfig config) {
        super(config);
    }
    
    public ProdutoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PRODUTO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NOME' TEXT," + // 1: nome
                "'PRECO_ACTUAL' INTEGER," + // 2: precoActual
                "'FOTO' BLOB," + // 3: foto
                "'SYNC' INTEGER);"); // 4: sync
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PRODUTO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Produto entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nome = entity.getNome();
        if (nome != null) {
            stmt.bindString(2, nome);
        }
 
        Integer precoActual = entity.getPrecoActual();
        if (precoActual != null) {
            stmt.bindLong(3, precoActual);
        }
 
        byte[] foto = entity.getFoto();
        if (foto != null) {
            stmt.bindBlob(4, foto);
        }
 
        Integer sync = entity.getSync();
        if (sync != null) {
            stmt.bindLong(5, sync);
        }
    }

    @Override
    protected void attachEntity(Produto entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Produto readEntity(Cursor cursor, int offset) {
        Produto entity = new Produto( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nome
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // precoActual
            cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3), // foto
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // sync
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Produto entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNome(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPrecoActual(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setFoto(cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3));
        entity.setSync(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Produto entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Produto entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
